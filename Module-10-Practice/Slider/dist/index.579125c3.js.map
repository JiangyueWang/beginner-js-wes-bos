{"mappings":"SAAS,MAAM,CAAC,MAAM,EAAE,CAAC;IACrB,EAA6C,AAA7C,2CAA6C;IAC7C,EAAE,IAAG,MAAM,YAAY,OAAO,GAC1B,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAqB;IAGzC,EAAuC,AAAvC,qCAAuC;IACvC,GAAG,CAAC,OAAO;IACX,GAAG,CAAC,IAAI;IACR,GAAG,CAAC,IAAI;IACR,EAA2B,AAA3B,yBAA2B;IAC3B,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAS;IAC7C,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,aAAa,CAAC,CAAW;IAChD,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,aAAa,CAAC,CAAW;aAEvC,WAAW,GAAG,CAAC;QACpB,EAA+G,AAA/G,6GAA+G;QAC/G,OAAO,GAAG,MAAM,CAAC,aAAa,CAAC,CAAU,cAAK,MAAM,CAAC,iBAAiB;QACtE,IAAI,GAAG,OAAO,CAAC,sBAAsB,IAAI,MAAM,CAAC,gBAAgB;QAChE,IAAI,GAAG,OAAO,CAAC,kBAAkB,IAAI,MAAM,CAAC,iBAAiB;IAEjE,CAAC;aACQ,YAAY,GAAG,CAAC;QACrB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAS;QAC/B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAM;QACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAM;IAC7B,CAAC;aACQ,IAAI,CAAC,SAAS,EAAE,CAAC;QACtB,EAAqD,AAArD,mDAAqD;QACrD,KAAK,CAAC,eAAe,GAAG,CAAC;YAAA,CAAM;YAAE,CAAS;YAAE,CAAM;QAAA,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,eAAe;QACxC,OAAO,CAAC,SAAS,CAAC,MAAM,IAAI,eAAe;QAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,eAAe;QACxC,EAAE,EAAC,SAAS,KAAK,CAAM,OACnB,EAAsC,AAAtC,oCAAsC;QACtC,EAAyE,AAAzE,uEAAyE;SACxE,IAAI,EAAE,OAAO,EAAE,IAAI,IAAI,CAAC;YAAA,IAAI,CAAC,sBAAsB,IAAI,MAAM,CAAC,gBAAgB;YAAE,IAAI;YAAE,OAAO;QAAA,CAAC;cAE9F,IAAI,EAAE,OAAO,EAAE,IAAI,IAAI,CAAC;YAAA,OAAO;YAAE,IAAI;YAAE,IAAI,CAAC,kBAAkB,IAAI,MAAM,CAAC,iBAAiB;QAAA,CAAC;QAEhG,YAAY;IAChB,CAAC;IACD,WAAW;IACX,YAAY;IAEZ,EAAkB,AAAlB,gBAAkB;IAClB,OAAO,CAAC,gBAAgB,CAAC,CAAO,YAAQ,IAAI,CAAC,CAAM;;IACnD,OAAO,CAAC,gBAAgB,CAAC,CAAO,QAAE,IAAI;AAE1C,CAAC;AAGD,KAAK,CAAC,OAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAS;AACtD,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAa","sources":["src/index.js"],"sourcesContent":["function Slider(slider) {\r\n    // check if someone passes the slider element\r\n    if(!(slider instanceof Element)) {\r\n        throw new Error('No slide passed in!');\r\n    } \r\n\r\n    // create variables for working sliders\r\n    let current;\r\n    let prev;\r\n    let next;\r\n    // selected needed elements\r\n    const slides = slider.querySelector('.slides');\r\n    const prevBtn = slider.querySelector('.goToPrev');\r\n    const nextBtn = slider.querySelector('.goToNext');\r\n    \r\n    function startSlider() {\r\n        // if there are no element has current class on it, then the current will be the firstElement of the slides div\r\n        current = slides.querySelector('.current') || slides.firstElementChild;\r\n        prev = current.previousElementSibling || slides.lastElementChild\r\n        next = current.nextElementSibling || slides.firstElementChild;\r\n\r\n    }    \r\n    function applyClasses() {\r\n        current.classList.add('current');\r\n        prev.classList.add('prev');\r\n        next.classList.add('next');\r\n    }\r\n    function move(direction) {\r\n        // first strip all the classes off the current slides\r\n        const classesToRemove = ['prev', 'current', 'next'];\r\n        prev.classList.remove(...classesToRemove);\r\n        current.classList.remove(...classesToRemove);\r\n        next.classList.remove(...classesToRemove);\r\n        if(direction === 'back') {\r\n            // make an new array of the new values\r\n            // and destructure them over an into the prev, current and next variables\r\n            [prev, current, next] = [prev.previousElementSibling || slides.lastElementChild, prev, current];\r\n        } else {\r\n            [prev, current, next] = [current, next, next.nextElementSibling || slides.firstElementChild];\r\n        }\r\n        applyClasses();\r\n    }\r\n    startSlider();\r\n    applyClasses();\r\n\r\n    // event listners \r\n    prevBtn.addEventListener('click', () => move('back'));\r\n    nextBtn.addEventListener('click', move);\r\n    \r\n}\r\n\r\n\r\nconst slider = Slider(document.querySelector('.slider'));\r\nconst dogSlider = Slider(document.querySelector('.dog-slider'));"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}